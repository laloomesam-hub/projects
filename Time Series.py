# -*- coding: utf-8 -*-
"""final_ts.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HElZWT4OQw7O8YdpnLQSvZub9EdETCwX
"""

import pandas as pd
import matplotlib.pyplot as plt



# Load data
df = pd.read_csv("/content/sector_51_daily_aqi.csv")

#drop the first column (unnessary)
df = df.drop(columns=['Unnamed: 0'])

ndf = df['AQI']

plt.figure(figsize=(10,5))
plt.plot(df['AQI'], label='Daily AQI',color='brown')
plt.title("Daily AQI in Sector 51")
plt.xlabel("Day")
plt.ylabel("AQI")
plt.legend()
plt.grid(True)
plt.show()

#to fill NA/missing values with mean of AQI
mean_AQI = ndf.mean()
df1 = df.fillna(mean_AQI)
df1['AQI'].isnull().sum()
ndf = df1['AQI']
print("Missing values:",ndf.isna().sum())

#adf test to check for stationarity
from statsmodels.tsa.stattools import adfuller
adf_result=adfuller(ndf)
print("ADF value: ",adf_result[0])
print("p-value: ",adf_result[1])
print("Critical values: ")
for key, value in adf_result[4].items():
    print(f'   {key}: {value}')

from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
df['Date']=pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)
fig,ax=plt.subplots(2,1,figsize=(12,8))

# ACF plot
plot_acf(ndf, ax=ax[0], lags=30,color='brown')
ax[0].set_title("Autocorrelation Function (ACF)")

# PACF plot
plot_pacf(ndf, ax=ax[1], lags=30, method='ywm',color='brown')
ax[1].set_title("Partial Autocorrelation Function (PACF)")

plt.show()

from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX

# ARIMA(1,0,1) using MLE

arima_model = ARIMA(df['AQI'], order=(1, 0, 1))
arima_result = arima_model.fit()
print("\nARIMA(1,0,1) MLE Parameters:")
print(arima_result.params)

# SARIMA(1,0,1)(1,0,1,12) using MLE
sarima_model = SARIMAX(df['AQI'], order=(1, 0, 1), seasonal_order=(1, 0, 1, 12))
sarima_result = sarima_model.fit()
print("\nSARIMA(1,0,1)(1,0,1,12) MLE Parameters:")
print(sarima_result.params)

from statsmodels.tsa.arima.model import ARIMA
import matplotlib.pyplot as plt

train = ndf[:-20]
test = ndf[-20:]


mod1 = ARIMA(train, order = (1,0,1))
mod1_fit = mod1.fit()
mod1_fit.summary()

from statsmodels.tsa.statespace.sarimax import SARIMAX

smod1 = SARIMAX(train,
                order=(1, 0, 1),
                seasonal_order=(1, 0, 1, 12))

smod1_fit = smod1.fit()
print(smod1_fit.summary())

forecast = mod1_fit.forecast(steps=20)
sforecast = smod1_fit.forecast(steps=20)



print('ARIMA\n',forecast)
print('SARIMA\n',sforecast)

plt.plot(test.index, test, label='Actual')
plt.plot(test.index, sforecast, label='SARIMA Forecast', color='red')
plt.plot(test.index, forecast, label='ARIMA Forecast', color='green')

plt.legend()
plt.title('Forecast vs Actual')
plt.show()

residuals = mod1_fit.resid

# Plot residuals over time
plt.figure(figsize=(10, 4))
plt.plot(residuals)
plt.title('ARIMA Residuals')
plt.xlabel('Time')
plt.ylabel('Error')
plt.grid(True)
plt.show()

sresiduals = smod1_fit.resid
plt.figure(figsize=(10, 4))
plt.plot(sresiduals)
plt.title('SARIMA Residuals')
plt.xlabel('Time')
plt.ylabel('Error')
plt.grid(True)
plt.show()

plot_acf(sresiduals, lags=20)
plt.title('ACF of Residuals')
plt.show()

import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error
s_mse = mean_squared_error(test, sforecast)
s_mape = mean_absolute_percentage_error(test, sforecast) * 100
mse = mean_squared_error(test, forecast)
mape = mean_absolute_percentage_error(test, forecast) * 100
print(f'MSE: {mse:.2f}')
print(f'MAPE: {mape:.2f}%')
print(f'SARIMA MSE: {s_mse:.2f}')
print(f'SARIMA MAPE: {s_mape:.2f}%')

from statsmodels.stats.diagnostic import acorr_ljungbox

ljung_box = acorr_ljungbox(residuals, lags=[10], return_df=True)
s_ljung_box = acorr_ljungbox(sresiduals, lags=[10], return_df=True)
print(f'ARIMA ljung box:\n {ljung_box}\n')

print(f'SARIMA ljung box:\n {s_ljung_box}')

from statsmodels.tsa.seasonal import seasonal_decompose
decomposition=seasonal_decompose(ndf,model='additive',period=12)
decomposition.plot()
plt.show()

plt.plot(test.index, test, label='Actual')
plt.plot(test.index, sforecast, label='SARIMA Forecast', color='red')

plt.legend()
plt.title('Forecast vs Actual')
plt.show()
